version: '3.8'
services:

  kafka:
    image: debezium/kafka:2.0
    container_name: kafka
    restart: always
    ports:
      - ${PORT_BROKER}:${PORT_BROKER}
    environment:
      CLUSTER_ID: '${BROKER_CLUSTER_ID}'
      NODE_ID: 1
      KAFkA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SUPPORT_METRICS_ENABLE: 0
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://:${PORT_BROKER}, CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:${PORT_BROKER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES}
      AUTO_CREATE_TOPICS_ENABLE: 'true'
      CREATE_TOPICS: "\
      fnol.IncidentCreated"
    networks:
      - dockernet

  connect:
    image: debezium/connect:2.3
    container_name: connect
    restart: always
    depends_on:
      - kafka
      - postgres-reporting #TODO: maybe a better way to handle this dependency instead of reusing the postgres service for user service
    ports:
      - 8483:8483
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my-connect-configs
      OFFSET_STORAGE_TOPIC: my-connect-offsets
      STATUS_STORAGE_TOPIC: my-connect-statuses
    links:
      - postgres-user
    networks:
      - dockernet


  kafbat-ui:
    container_name: kafbat-ui
    image: kafbat/kafka-ui:latest
    ports:
      - 9091:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - dockernet

  postgres-proposal:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: proposaldb
    ports:
      - 5433:5432

  postgres-portfolio:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: portfoliodb
    ports:
      - 5434:5432

  postgres-customer:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: customerdb
    ports:
      - 5435:5432

  postgres-product:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: productdb
    ports:
      - 5436:5432

  postgres-order:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: orderdb
    ports:
      - 5437:5432

  postgres-advisor:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: advisordb
    ports:
      - 5438:5432

  postgres-reporting:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: reportingdb
    ports:
      - 5439:5432

  postgres-notification:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: notificationdb
    ports:
      - 5440:5432

  postgres-profiler:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: profilerdb
    ports:
      - 5441:5432

  postgres-user:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: userdb
    ports:
      - 5442:5432

  postgres-bank:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: bankdb
    ports:
      - 5443:5432

  postgres-document:
    image: postgres:15
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: documentdb
    ports:
      - 5444:5432

  splunk:
    image: splunk/splunk:latest
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_PASSWORD=password
      - SPLUNK_HEC_TOKEN=12345678-1234-1234-1234-1234567890ab
      - SPLUNK_HEC_PORT=9090
      - TZ=Europe/Rome
    ports:
      - 8000:8000   # Splunk Web UI
      - 9090:9090   # HTTP Event Collector (HEC)
      - 9997:9997   # Splunk Forwarder
    volumes:
      - splunk-data:/opt/splunk/var
      - ./logs/:/logs/
    restart: unless-stopped

#FIXME: The Splunk Forwarder service is configured to monitor the /logs/ directory but it's not showing up in the Splunk UI.
  splunk-forwarder:
    image: splunk/universalforwarder:latest
    user: root
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_PASSWORD=password
      - SPLUNK_ADD=monitor /logs/ -sourcetype _json  -index main -auth admin:password
      - SPLUNK_FORWARD_SERVER=splunk:9997
      - TZ=Europe/Rome
      - SPLUNK_DEBUG=true
    volumes:
      - ./logs/:/logs/
    depends_on:
      - splunk

  # MinIO is used as an S3-compatible object storage service
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data

  # Fake GCS server for GCS compatibility
  fake-gcs:
    image: fsouza/fake-gcs-server:latest
    container_name: fake-gcs
    ports:
      - "7000:7000" # REST API
    environment:
      - STORAGE_DIR=/data
      - SCHEME=http
    volumes:
      - fakegcs-data:/data
    command: -scheme http -external-url http://localhost:7000 -port 7000


networks:
  dockernet:
    name: ica-network

volumes:
  splunk-data:
    driver: local
  minio-data:
    driver: local
  fakegcs-data:
    driver: local
